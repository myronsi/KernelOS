; ------------------------------------------------------------------------------
; Guide:	00-BOOT-SECTOR
; File:		ex08 / print_string_pm.asm
; Title:	Функция вывода строки на экран в 32-битном защищенном режиме
; ------------------------------------------------------------------------------
; Description:
;	Плюсы 32-битного режима: возможность использовать 32-битные регистры и
;	адрессацию памяти, защищенную память виртуальную память
;	Минусы: отсутствие БИОС прерываний, требование наличия GDT (об этом позже)
;	В этой программе мы напишем новую функцию печати строки, но без прерываний
;	БИОСа, а напрямую манипулируя VGA видеопамятью, вместо вызова int 0x10.
;	VGA память размещена начиная с адреса 0xb8000, и у VGA имеется специальный
;	текстовый режим, поэтому нам не придется напрямую рисовать пиксели.
;	Особенности:
;	1. Символ представляется в виде 2-х байтов. Первый байт - сам символ,
;	второй байт - 4 бита на цвет текста и еще 4 на цвет фона. 
;	Например, чтобы распечатать символ 'A' белым текстом на черном фоне, мы
;	испольузуем 0x410f: 0x41 == 'A', 0 == белый, f == черный.
;
;		Bit:     | 15 14 13 12 11 10 9 8 | 7 6 5 4 | 3 2 1 0 |
;		Content: | ASCII                 | FG      | BG      |
;
; ------------------------------------------------------------------------------


[bits 32]					; Используем 32-битный режим

							; Определяем некоторые константы
VIDEO_MEMORY equ 0xb8000	; = адрес начала памяти VGA
WHITE_ON_BLACK equ 0x0f		; = цвет символов (0x0f - белый на черном)

print_string_pm:
	pusha
	mov edx, VIDEO_MEMORY	; Перемещаем в EDX адрес начала массива видеопамяти

print_string_pm_loop:
							; Помним, что AX (2б) = AH(1б) и AL(1б)
	mov al, [ebx]			; Сохраняем символ из EBX в AL
	mov ah, WHITE_ON_BLACK	; Устанавливаем цвет символов в AH
							; таким образом AX получается равен символу + цвету

	cmp al, 0				; if (AL == 0), т.е. если конец массива, то
	je print_string_pm_done	; заканчиваем выполнение функции
							; else:
	mov [edx], ax			; video_memory[EDX] = AX
	add ebx, 1				; переходим к следующему символу (+1, просто массив)
	add edx, 2				; переходим к следующему адресу в VGA (+2 т.к.
							; два байта на символ)

	jmp print_string_pm_loop

print_string_pm_done:
	popa
	ret
